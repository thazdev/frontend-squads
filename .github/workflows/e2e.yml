name: e2e-smoke
on:
  pull_request: { branches: [main] }

jobs:
  e2e:
    runs-on: ubuntu-latest
    services:
      arango:
        image: arangodb:latest
        env: { ARANGO_ROOT_PASSWORD: root }
        ports: [8529:8529]

    steps:
    - uses: actions/checkout@v4

    # pnpm + Node + cache
    - uses: pnpm/action-setup@v3
      with: { version: 8 }
    - uses: actions/setup-node@v3
      with: { node-version: 20 }
    - uses: actions/cache@v4
      with:
        path: ~/.local/share/pnpm/store/v3
        key: pnpm-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: pnpm-${{ runner.os }}-

    # cache do Chromium
    - uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: pw-${{ runner.os }}-1.42.1

    # deps do frontend
    - run: pnpm install --no-frozen-lockfile

    # instala só Chromium
    - run: PW_BRANCH=chromium pnpm exec playwright install chromium
      env: { PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS: 1 }

    # clone + deps backend
    - name: Clone + install backend
      run: |
        git clone --depth 1 https://github.com/thazdev/backend-squads.git backend
        cd backend && pnpm install --no-frozen-lockfile

    # seed coleções
    - run: |
        for col in users squads tasks; do
          curl -s -u root:root -X POST http://localhost:8529/_api/collection \
               -H 'Content-Type: application/json' -d "{\"name\":\"$col\"}" || true
        done

    # start backend
    - name: Start backend
      working-directory: backend
      run: |
        pnpm exec ts-node --transpile-only src/index.ts >/tmp/back.log 2>&1 &
        for i in {1..15}; do nc -z localhost 4000 && exit 0; sleep 2; done
        echo "::error::Backend não subiu"; cat /tmp/back.log; exit 1

    # start Vite dev
    - name: Start frontend (Vite dev)
      run: |
        pnpm exec vite --host --port 5173 >/tmp/vite.log 2>&1 &
        for i in {1..15}; do nc -z localhost 5173 && exit 0; sleep 2; done
        echo "::error::Vite não subiu"; cat /tmp/vite.log; exit 1

    # smoke tests — agora json vai para playwright-report/result.json
    - name: Run smoke tests
      run: |
        # dot (pontinhos)  + github (anotações)  + json (arquivo)
        pnpm exec playwright test tests/specs/smoke.spec.ts \
          --reporter=dot,github,json \
          --quiet \
          | tee $RUNNER_TEMP/test-output.txt



    # artefato JSON para IA/bots
    - uses: actions/upload-artifact@v4
      with:
        name: playwright-json
        path: playwright-report/result.json
        retention-days: 5

    # summary enxuto
    - name: Summary 🎯
      if: always()
      run: |
        PASSED=$(grep -o "✓" $RUNNER_TEMP/test-output.txt | wc -l || true)
        FAILED=$(grep -o "✘" $RUNNER_TEMP/test-output.txt | wc -l || true)
        echo "## 🧪 Smoke-tests"          >> $GITHUB_STEP_SUMMARY
        echo "- ✅  Passed: **$PASSED**"  >> $GITHUB_STEP_SUMMARY
        echo "- ❌  Failed: **$FAILED**"  >> $GITHUB_STEP_SUMMARY
        echo ""                           >> $GITHUB_STEP_SUMMARY
        if [ "$FAILED" -gt 0 ]; then
          echo "<details><summary>⛔ Failed tests</summary>" >> $GITHUB_STEP_SUMMARY
          grep -E "^ *✘" $RUNNER_TEMP/test-output.txt \
            | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY || true
          echo '</details>' >> $GITHUB_STEP_SUMMARY
        fi
