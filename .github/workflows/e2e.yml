name: e2e-smoke
on:
  pull_request:
    branches: [main]

jobs:
  e2e:
    runs-on: ubuntu-latest

    services:
      arango:
        image: arangodb:latest
        env:
          ARANGO_ROOT_PASSWORD: root
        ports: [8529:8529]

    steps:
      # checkout + pnpm + Node (com cache nativo)
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with: { version: 8 }
      - uses: actions/setup-node@v3
        with: { node-version: 20, cache: pnpm }

      # deps front + navegador
      - run: pnpm install --no-frozen-lockfile
      - run: PW_BRANCH=chromium pnpm exec playwright install chromium
        env: { PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS: 1 }

      # backend: clone, deps, seed, start
      - name: Backend
        run: |
          git clone --depth 1 https://github.com/thazdev/backend-squads.git backend
          pnpm --dir backend install --no-frozen-lockfile
          for c in users squads tasks; do
            curl -su root:root -X POST http://localhost:8529/_api/collection \
              -H 'Content-Type: application/json' -d "{\"name\":\"$c\"}" || true
          done
          pnpm --dir backend exec ts-node --transpile-only src/index.ts >/tmp/back.log 2>&1 &
          for i in {1..15}; do nc -z localhost 4000 && break; sleep 2; done

      # frontend vite dev
      - name: Frontend
        run: |
          pnpm exec vite --host --port 5173 >/tmp/vite.log 2>&1 &
          for i in {1..15}; do nc -z localhost 5173 && break; sleep 2; done

      # smoke-tests (dot reporter = log minúsculo)
      - name: Smoke
        run: |
          pnpm exec playwright test tests/specs/smoke.spec.ts \
            --reporter=dot,github --quiet | tee $RUNNER_TEMP/out.txt

      # summary simples (conta símbolos ·/× e mostra 1ª linha de erro)
      - name: Summary 🎯
        if: always()
        run: |
          LOG=$RUNNER_TEMP/out.txt
          PASS=$(grep -o "·" "$LOG" | wc -l)
          FAIL=$(grep -o "×" "$LOG" | wc -l)

          {
            echo "## 🧪 Smoke-tests"
            echo "- ✅  Passed: **$PASS**"
            echo "- ❌  Failed: **$FAIL**"
          } >> $GITHUB_STEP_SUMMARY

          if [ "$FAIL" -gt 0 ]; then
            echo -e "\n<details><summary>⛔ Failures</summary>" >> $GITHUB_STEP_SUMMARY
            awk '
              /^[[:space:]]*[0-9]+\)/ {print "- " $0; getline; print "  " $0}
            ' "$LOG" >> $GITHUB_STEP_SUMMARY
            echo '</details>' >> $GITHUB_STEP_SUMMARY
          fi
